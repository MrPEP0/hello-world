# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

# Use a package of configuration called an orb.
#orbs:
  # Declare a dependency on the welcome-orb
#  welcome: circleci/welcome-orb@0.4.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable #So in this case it could have been a super lightweight alpine based image, or it could have been a node image.
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: echo $myName
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Exercise of Sharing Files" > ~/output.txt
        # save the files your deploy step needs - Special step used to persist a temporary file to be used by another job in the workflow
      - persist_to_workspace:
          root: ~/    # relative path to our working directory
          paths:      # file globs which will be persisted to the workspace
           - output.txt
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # attach the files you persisted in the doing-things-job. Special step used to attach the workflowâ€™s workspace to the current container. The full contents of the workspace are downloaded and copied into the directory the workspace is being attached at. 
      - attach_workspace:
          at: ~/ # relative path to our working directory
      - run: cat ~/output.txt
  reusable_commands:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_d
      - run:  # Exercise: Job Failures
          name: Upload Failed Tests
          command: return 1
          when: on_fail
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  myNewWorkflow:
    jobs:
      - say-hello
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - reusable_commands